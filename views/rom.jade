script
    /* 
     * START IFRAME MOD
     *  
     * This mod only works with Highslide versions > 4.0.
     * 
     * NOTE:
     * For the thumbstrip paths be be correct, the main page and the frame page
     * must be in the same folder. Otherwise, new paths have to be set in 
     * hs.stripItemFormatter
     */ 


    /**
     * Set the iframe's id in a custom hs variable
     */
    hs.callingFrameId = 'screenshots';

    /**
     * Override to also look for elements in the iframe
     */
    hs.$ = function (id) {
        var iframe = document.getElementById(hs.callingFrameId);
        var iDoc = iframe.contentDocument || iframe.contentWindow.document;

        if (document.getElementById(id)) return document.getElementById(id);
        else if (iDoc.getElementById(id)) {
            // workaround for IE's missing importNode():
            iEl = iDoc.getElementById(id);
            return hs.createElement(iEl.tagName, { className: iEl.className, innerHTML: iEl.innerHTML } );
        }
        return null;
    };

    /**
     * Override to look for anchors within the iframe
     */
    hs.Expander.prototype.getAdjacentAnchor = function(op) {
        var iframe = document.getElementById(hs.callingFrameId);
        var iDoc = iframe.contentDocument || iframe.contentWindow.document;

        var aAr = iDoc.getElementsByTagName('A'), hsAr = {}, activeI = -1, j = 0;
        for (i = 0; i < aAr.length; i++) {
            if (hs.isHsAnchor(aAr[i]) && ((this.slideshowGroup == hs.getParam(aAr[i], 'slideshowGroup')))) {
                hsAr[j] = aAr[i];
                if (aAr[i] == this.a) activeI = j;
                j++;
            }
        }
        return hsAr[activeI + op];
    };

    /**
     * Override to index anchors in the iframe
     */
    hs.updateAnchors = function() {
        var el, els, all = [], images = [], htmls = [], groups = {}, re;


        var iframe = document.getElementById(hs.callingFrameId);
        var iDoc = iframe.contentDocument || iframe.contentWindow.document;

        for (var i = 0; i < hs.openerTagNames.length; i++) { /// loop through tag names
            els = iDoc.getElementsByTagName(hs.openerTagNames[i]);
            for (var j = 0; j < els.length; j++) { /// loop through each element
                el = els[j];
                re = hs.isHsAnchor(el);
                if (re) {
                    hs.push(all, el);
                    /// images
                    if (re[0] == 'hs.expand') hs.push(images, el);
                    /// htmls
                    else if (re[0] == 'hs.htmlExpand') hs.push(htmls, el);
                    /// groupwise
                    var g = hs.getParam(el, 'slideshowGroup') || 'none';
                    if (!groups[g]) groups[g] = [];
                    hs.push(groups[g], el);
                }
            }
        }
        hs.anchors = { all: all, groups: groups, images: images, htmls: htmls };
        return hs.anchors;

    };

    /**
     * Override to add the offset of the iframe itself
     */
    hs.getPosition = function(el)    {
        var parent = el;
        var p = { x: parent.offsetLeft, y: parent.offsetTop };
        while (parent.offsetParent)    {
            parent = parent.offsetParent;
            p.x += parent.offsetLeft;
            p.y += parent.offsetTop;
            if (parent != document.body && parent != document.documentElement) {
                p.x -= parent.scrollLeft;
                p.y -= parent.scrollTop;
            }
        }
    
        // add the offset of the iframe itself
        var ownerDocument = el.ownerDocument || el.document;
        //if (!/IFRAME/.test(el.tagName)) {
        if (ownerDocument != document) {
            var iframePos = hs.getPosition(document.getElementById(hs.callingFrameId));
            p.x += iframePos.x;
            p.y += iframePos.y;
        }

        return p;
    };

script
    function validateUploadForm() {
      var file = $("#file")[0];
      var name = $("#name")[0];
      var device = $("#device")[0];
      var summary = $("#summary")[0];
      if (name.value == null || name.value == "") {
        alert('Please enter a friendly name for your update.zip.');
        return false;
      }
      if (device && device.value == null || device.value == "" || device.value == "none") {
        alert('Please the target device for your update.zip.');
        return false;
      }
      if (summary.value == null || summary.value == "") {
        alert('Please enter a description for your update.zip.');
        return false;
      }
      if (file && file.value == null || file.value == "") {
        alert('Please select the update.zip to be uploaded.');
        return false;
      }
      return true;
    }
h1 ROM Manager Developer Portal
a(href="/developer") Go Back
h2 Upload Android Update.zip
- if (statusLine)
    p(class="status")= statusLine
br
br
table
    tr
        td(valign='top')
            form(method="post", id="upload", enctype=rom.filename ? "application/x-www-form-urlencoded" : "multipart/form-data", action=rom.filename ? "/developer/rom/" + rom.id : "/developer/upload", onsubmit="return validateUploadForm()")
                #container Update Name (the friendly name of your ROM, Kernel, or update.zip)
                #container
                    input(type="text", id="name", name="name", value=rom.name)
                p
                #container Device
                #container
                    - if (!rom.device)
                        select(name="device", id="device")
                            option(value='none') Please select the target device
                            - each device in devices
                                option(value=device.key)=device.name
                    - else 
                        b= rom.device
                        input(type='hidden', name='device', id='device', value=rom.device)
                p
                - if (rom.downloadUrl)
                    #container ROM Manager Visibility (use this to hide older ROMs)
                    #container
                        select(name="visible", id="visible")
                            - if (rom.visible)
                                option(value="1") Visible
                                option(value="0") Hidden
                            - else
                                option(value="0") Hidden
                                option(value="1") Visible
                p
                #container Description
                #container
                    input(type="text", id="summary", name="summary", value=rom.summary)
                p
                - if (rom.downloadUrl)
                    #container ro.modversion
                    - if (rom.modversion != null && rom.modversion != '')
                        #container=rom.modversion
                    - else
                        #container(class="error") No modversion found in the build.prop. Automatic OTA updates will not work.
                p
                - if (rom.downloadUrl)
                    #container ro.rommanager.developerid
                    - if (rom.developerIdProp == null || rom.developerIdProp == '')
                        #container(class="error")="ro.rommanager.developerid=" + rom.developerIdString
                        #container(class="error") was not found in your build.prop.
                        #container(class="error") OTA update notifications will not work.
                    - else if (rom.developerIdProp != rom.developerIdString)
                        #container(class="error") build.prop contains:
                        #container(class="error")="ro.rommanager.developerid=" + rom.developerIdProp
                        #container(class="error") But it should be (as according to your settings):
                        #container(class="error")="ro.rommanager.developerid=" + rom.developerIdString
                    - else
                        #container=rom.developerIdProp
                p
                #container Product (optional, necessary for OTA notifications)
                #container
                    input(type="text", name="product", value=rom.product)
                p
                p
                - if (!rom.downloadUrl)
                    #container update.zip file
                        #container
                            input(type="file", id="file", name="rom", value=rom.filename)
                - else
                    #container Download Link:
                    #container
                        a(href=rom.downloadUrl)= rom.filename
                - if (!rom.downloadUrl)
                    p Screenshots can be uploaded after the ROM has been uploaded.
                - else
                    p
                        iframe(src="/developer/rom/" + rom.id + "/screenshot", frameborder="0", width="100%", height="256px", scrolling="no", id="screenshots")
                p
                #container
                    input(type="submit", value=!rom.filename ? "Upload" : "Update")
        td(valign="top")
            a(href="/images/romlegend.jpg", class="highslide", onclick="return hs.expand(this)")
                img(src="/images/romlegend.jpg", height=265, width=160)
br
br
